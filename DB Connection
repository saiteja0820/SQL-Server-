package database.connection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

public class Program {

    private static final String DB_NAME = "TestDB";
    private static final String MASTER_DB_NAME = "master";
    
    public static void main(String[] args) {
        createDatabase();
        createTable();
        insertData();
        updateData();
        queryData();
    }

    // данный метод при желании можно вынести в отдельный класс
    private static Connection getConnection(String databaseName) throws SQLException {
        String url = "jdbc:sqlserver://localhost:1433;databaseName=" + databaseName + ";integratedSecurity=true;encrypt=false;";
        return DriverManager.getConnection(url);
    }
    
    private static void createDatabase() {
        String checkDbSql = "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '" + DB_NAME + "') " +
                            "BEGIN " +
                            "CREATE DATABASE " + DB_NAME + " " +
                            "END";
        try (Connection conn = getConnection(MASTER_DB_NAME);
             Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(checkDbSql);
            System.out.println("База данных успешно создана (либо уже существует)...");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void createTable() {
        String checkTableSql = "USE " + DB_NAME + "; " +  // переключение на пользовательскую БД
                               "IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Users') " +
                               "BEGIN " +
                               "CREATE TABLE dbo.Users " +
                               "(id INT PRIMARY KEY IDENTITY(1, 1), " +
                               " name NVARCHAR(50), " +
                               " age INT) " +
                               "END";
        try (Connection conn = getConnection(DB_NAME);
            Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(checkTableSql);
            System.out.println("Таблица успешно создана (либо уже существует)...");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void insertData() {
        String sql = "INSERT INTO Users (name, age) " +
                     "VALUES ('Василиус Пупкинс', 30)";
        execute(sql, "Данные успешно добавлены в таблицу.");
    }

    private static void updateData() {
        String sql = "UPDATE Users " +
                     "SET age = 31 " +
                     "WHERE name = 'Василиус Пупкинс'";
        execute(sql, "Данные успешно обновлены.");
    }

    private static void queryData() {
        String sql = "SELECT id, name, age FROM Users";

        try (Connection conn = getConnection(DB_NAME);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int age = rs.getInt("age");

                System.out.println("ID: " + id + ", Name: " + name + ", Age: " + age);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void execute(String sql, String successMessage) {
	// пример открытия соединения с БД, за счёт использования конструкции try-с-ресурсами обеспечивается закрытие соединения
        try (Connection conn = getConnection(DB_NAME);
            Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(sql);
            System.out.println(successMessage);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
